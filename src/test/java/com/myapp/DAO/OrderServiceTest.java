package com.myapp.DAO;

import com.myapp.enums.Constants;
import com.myapp.model.*;
import com.myapp.service.OrderService;
import com.myapp.utils.DbPopulator;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.bridge.SLF4JBridgeHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

@ContextConfiguration({
        "classpath:spring-app.xml",
        "classpath:spring-db.xml"
})
@RunWith(SpringJUnit4ClassRunner.class)
public class OrderServiceTest {

    static {
        SLF4JBridgeHandler.install();
    }

    @Autowired
    private DbPopulator dbPopulator;

    @Autowired
    private OrderService orderService;

    private static boolean dataLoaded = false;

    public OrderServiceTest(){
    }

    @Before
    public void setUp() throws Exception {
        if(!dataLoaded) {
            dbPopulator.execute();
            dataLoaded = true;
        }
    }

    @After
    public void tearDown() throws Exception {
    }

    SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

  //  String dateString = format.format( new Date()   );

    //------OrderDAO----------
    @Test
    public void testCRUDOrder() throws ParseException {
        //-----save------
        OrderState orderState = new OrderState(1, Constants.DELIVERED);
        List<OrderDetail> orderDetailList = new ArrayList<>();

        Date date = format.parse( "2018-11-25" );
        orderDetailList.add(new OrderDetail(0, 100001, "Soap", "Mary Key", 1000001, "Strawberry", "50 ml", 2, new BigDecimal(15.0), 11, 14, "", "img05"));
        Order orderExp = new Order(1001, date, new BigDecimal(30.0), 11, date, "Delivery Info", orderState, "147 Main Street", orderDetailList);
        Order order = orderService.saveOrder(orderExp);
        int orderId = order.getId();

        //-----getById-------
        Order orderAct = orderService.getOrderById(orderId);
        orderExp.setId(orderId);     //id is autogenerated
        orderExp.getOrderDetailList().get(0).setOrderId(order.getOrderDetailList().get(0).getOrderId());     //id is autogenerated
        Assert.assertEquals(orderExp, orderAct);

        //-----update-----
        orderExp.setDeliveryAddress("158 Main Street Updated");
        orderService.saveOrder(orderExp);

        //-----getAll-----
        List<Order> orderList = orderService.getAllOrders();
        for (Order u: orderList) {
            if(u.getId() == orderId) {
                orderAct = u;
                break;
            }
        }
        Assert.assertEquals(orderExp, orderAct);

        //-----delete-----
        boolean deleteResult = orderService.deleteOrderById(orderId);
        Assert.assertTrue(deleteResult);
        Assert.assertNull(orderService.getOrderById(orderId));
    }

  /*  @Test
    public  void testGetOrderByName() {
        Map<String, Object> param = new HashMap<>();
        param.put("name", "SoA");
        List<Order> orderList = orderService.getOrderByParam(param);
        Assert.assertEquals("Soap", orderList.get(0).getName());
    }

    @Test
    public void testGetOrderByBrandId() {
        Map<String, Object> param = new HashMap<>();
        param.put("brandId", 201);
        List<Order> orderList = orderService.getOrderByParam(param);
        Assert.assertEquals("Soap", orderList.get(0).getName());
    }

    @Test
    public void testGetOrderByPrice() {
        Map<String, Object> param = new HashMap<>();
        param.put("lowPrice", new BigDecimal(5));
        param.put("highPrice", new BigDecimal(40));
        List<Order> orderList = orderService.getOrderByParam(param);
        Assert.assertEquals(2, orderList.get(0).getOrderDetailList().size());
    }

    @Test
    public void testGetOrderByCategoryId() {
        Map<String, Object> param = new HashMap<>();
        param.put("categoryId", 101);
        List<Order> orderList = orderService.getOrderByParam(param);
        Assert.assertEquals(1, orderList.size());
    }

    @Test
    public void testGetAllOrderOrderBy() {
        Map<String, Object> param = new HashMap<>();
        param.put("orderBy", "name");
        List<Order> orderList = orderService.getAllOrders(param);
        Assert.assertEquals("Shampoo", orderList.get(0).getName());
    }

    //-----CategoryDAO-----------
    @Test
    public void testCRUDCategory() {
        //-----save------
        Category categoryExp = new Category("Moisturizer", "Description");
        Category category = orderService.saveCategory(categoryExp);
        int categoryId = category.getId();

        //-----getById-------
        Category categoryAct = orderService.getCategoryById(categoryId);
        categoryExp.setId(categoryId);     //id is autogenerated
        Assert.assertEquals(categoryExp, categoryAct);

        //-----update-----
        categoryExp.setName("Creams");
        orderService.saveCategory(categoryExp);

        //-----getAll-----
        List<Category> categoryList = orderService.getAllCategories();
        for (Category c: categoryList) {
            if(c.getId() == categoryId) {
                categoryAct = c;
                break;
            }
        }
        Assert.assertEquals(categoryExp, categoryAct);

        //-----delete-----
        boolean deleteResult = orderService.deleteCategoryById(categoryId);
        Assert.assertTrue(deleteResult);
        Assert.assertNull(orderService.getCategoryById(categoryId));
    }

    @Test
    public void testGetCategoryByOrderId() {
        //category_order (order_id, category_id) VALUES (100001, 101);
        List<Category> categoryList = orderService.getCategoryByOrderId(100001);
        Assert.assertEquals("Bath", categoryList.get(0).getName());
    }

    @Test
    public void testGetCategoryByName() {
        //category (name, description) VALUES ('Bath', 'Bath Description');
        List<Category> categoryList = orderService.getCategoryByName("Bath");
        Assert.assertEquals("Bath", categoryList.get(0).getName());
    }

    //-----ItemDAO-----
    @Test
    public void testCRUDItem() {
        //-----save------
        Item itemExp = new Item(100002, new BigDecimal("16.35"), "Item Type", "Item Size", 11, 25, 14, "img02", 15.0, TRUE);
        Item item = orderService.saveItem(itemExp);
        int itemId = item.getId();

        //-----getById-------
        Item itemAct = orderService.getItemById(itemId);
        itemExp.setId(itemId);     //id is autogenerated
        Assert.assertEquals(itemExp, itemAct);

        //-----update-----
        itemExp.setQuantity(55);
        orderService.saveItem(itemExp);

        //-----getAll-----
        List<Item> itemList = orderService.getAllItems();
        for (Item c: itemList) {
            if(c.getId() == itemId) {
                itemAct = c;
                break;
            }
        }
        Assert.assertEquals(itemExp, itemAct);

        //-----delete-----
        boolean deleteResult = orderService.deleteItemById(itemId);
        Assert.assertTrue(deleteResult);
        Assert.assertNull(orderService.getItemById(itemId));
    }*/
}
