package com.myapp.DAO;

import com.myapp.model.Role;
import com.myapp.model.User;
import com.myapp.service.UserService;
import com.myapp.util.DbPopulator;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.bridge.SLF4JBridgeHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ImportResource;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import javax.annotation.Resource;
import javax.sql.DataSource;
import javax.validation.constraints.AssertTrue;
import java.util.List;

@ContextConfiguration({
        "classpath:spring-app.xml",
        "classpath:spring-db.xml"
})
@RunWith(SpringJUnit4ClassRunner.class)
public class UserServiceTest {

    static {
        SLF4JBridgeHandler.install();
    }

    @Autowired
    private UserService userService;

    @Resource
    private DbPopulator dbPopulator;

 /*   @Resource
    DataSource dataSource;*/

    @Before
    public void setUp() throws Exception {
        dbPopulator.execute();
    }

    @After
    public void tearDown() throws Exception {
    //    new DbPopulator("classpath:cleanDB.sql", dataSource).execute();
    }

    @Test
    public void testCRUDUser() {
        //-----save------
        User userExp = new User("Emma Save", "emma@gmail.com", "110", new Role(1, "ROLE_USER"), "65 Central St, Brooklyn, NY, 11256", "212-159-2516", null);
        User user = userService.saveUser(userExp);
        int userId = user.getId();

        //-----getById-------
        User userAct = userService.getUserById(user.getId());
        userExp.setId(userId);     //id is autogenerated
        Assert.assertEquals(userExp, userAct);

        //-----update-----
        userExp.setName("Emma Update");
        userExp.setRole(new Role(2, "ROLE_MODERATOR"));
        userService.saveUser(userExp);

        //-----getAll-----
        List<User> userList = userService.getAllUsers();
        Assert.assertEquals( 5, userList.size());
        for (User u: userList) {
            if(u.getId() == userId) {
                userAct = u;
                break;
            }
        }
        Assert.assertEquals(userExp, userAct);

        //-----delete-----
        boolean deleteResult = userService.deleteUserById(userId);
        Assert.assertTrue(deleteResult);
        Assert.assertNull(userService.getUserById(userId));

    }

    @Test
    public void testGetUserByEmail() {
    }

}
