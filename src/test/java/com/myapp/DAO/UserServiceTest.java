package com.myapp.DAO;

import com.myapp.model.Role;
import com.myapp.model.User;
import com.myapp.service.UserService;
import com.myapp.utils.DbPopulator;
import org.junit.*;
import org.junit.runner.RunWith;
import org.slf4j.bridge.SLF4JBridgeHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.DependsOn;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import javax.annotation.Resource;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@ContextConfiguration({
        "classpath:spring-app.xml",
        "classpath:spring-db.xml"
})
@RunWith(SpringJUnit4ClassRunner.class)
public class UserServiceTest {

    static {
        SLF4JBridgeHandler.install();
    }

    @Autowired
    private DbPopulator dbPopulator;

    @Autowired
    private UserService userService;

    @Before
    public void setUp() throws Exception {
        dbPopulator.execute();
    }

    @After
    public void tearDown() throws Exception {
    }

    //-----UserDAO----
    @Test
    public void testCRUDUser() {
        //-----save------
        User userExp = new User("Emma Save", "emma@gmail.com", "110", 1, "65 Central St, Brooklyn, NY, 11256", "212-159-2516", null);
        User user = userService.saveUser(userExp);
        int userId = user.getId();

        //-----getById-------
        User userAct = userService.getUserById(userId);
        userExp.setId(userId);     //id is autogenerated
        Assert.assertEquals(userExp, userAct);

        //-----update-----
        userExp.setName("Emma Update");
        userExp.setRoleId(2);
        userService.saveUser(userExp);

        //-----getAll-----
        List<User> userList = userService.getAllUsers();
        Assert.assertEquals(5, userList.size());
        for (User u : userList) {
            if (u.getId() == userId) {
                userAct = u;
                break;
            }
        }
        Assert.assertEquals(userExp, userAct);

        //-----delete-----
        boolean deleteResult = userService.deleteUserById(userId);
        Assert.assertTrue(deleteResult);
        Assert.assertNull(userService.getUserById(userId));
    }

    @Test
    public void testGetUserByEmail() {
        //user from populateDB.sql
        //('Cristina White', 'cristina@gmail.com', '111', 1, NULL, NULL, NULL);
        User userExp = new User("Cristina White", "cristina@gmail.com", "111", 1, null, null, null);
        User userAct = userService.getUserByEmail("cristina@gmail.com");
        userExp.setId(userAct.getId());     //id is autogenerated
        Assert.assertEquals(userExp, userAct);
    }

    @Test
    public void testGetUserByName() {
        //user from populateDB.sql
        //'Emily Orange', 'emily@gmail.com', '444', 3, '145 Ocean St., Brooklyn, NY, 11256',
        //        '277-159-2565', to_date('5-Mar-95', 'DD-MON-RR'));
        Map<String, Object> param = new HashMap<>();
        param.put("name", "Emily");
        param.put("role_id", 3);
        param.put("address", "Ocean");
        param.put("phone", "277-159-2565");
        //  param.put("birthday", new Date(5-Mar-95));
        List<User> userList = userService.getUsersByParam(param);
        Assert.assertEquals(1, userList.size());
    }


    //-----RoleDAO-----
    @Test
    public void testCRUDRole() {
        //-----save------
        Role roleExp = new Role("ROLE_TESTER");
        Role role = userService.saveRole(roleExp);
        int roleId = role.getId();

        //-----getById-------
        Role roleAct = userService.getRoleById(roleId);
        roleExp.setId(roleId);          //id is autogenerated
        Assert.assertEquals(roleExp, roleAct);

        //-----update-----
        roleExp.setName("ROLE_UPDATED");
        userService.saveRole(roleExp);

        //-----getAll-----
        List<Role> roleList = userService.getAllRoles();
        Assert.assertEquals(4, roleList.size());
        for (Role r : roleList) {
            if (r.getId() == roleId) {
                roleAct = r;
                break;
            }
        }
        Assert.assertEquals(roleExp, roleAct);

        //-----delete-----
        boolean deleteResult = userService.deleteRoleById(roleId);
        Assert.assertTrue(deleteResult);
        Assert.assertNull(userService.getRoleById(roleId));
    }

    @Test
    public void testGetRoleByName() {
        Role role = userService.getRoleByName("ROLE_USER");
        Assert.assertEquals("ROLE_USER", role.getName());
    }
}
